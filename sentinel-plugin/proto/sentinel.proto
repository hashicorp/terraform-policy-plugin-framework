// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

syntax = "proto3";

package protocol;

option go_package = "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto";

import "diagnostics/diagnostics.proto";
import "cty/cty.proto";
import "types/types.proto";

// Sentinel is the main service published by the plugin.
service Sentinel {
  // Setup allows the client and server to exchange known capabilities so they
  // trigger alternate behaviour to maintain forwards and backwards
  // compatibility. In addition, this call tells the plugin where to load the
  // sentinel policies from.
  rpc Setup(SentinelSetupRequest) returns (SentinelSetupResponse) {}
  // Evaluate evaluates a resource against the store policies. Essentially,
  // this function simply calls the equivalent Evaluate function on the
  // internal Sentinel go-library.
  rpc Evaluate(SentinelEvaluateRequest) returns (SentinelEvaluateResponse) {}
}

// SetupRequest is the message body for the Setup RPC.
message SentinelSetupRequest {

  // ClientCapabilities are the set of capabilities the client supports.
  // At launch, this is empty as we don't have any backwards or forwards
  // compatibility concerns to worry about.
  message ClientCapabilities {}

  // client_capabilities should be populated by the client to indicate which
  // behaviours the client is aware of.
  ClientCapabilities client_capabilities = 1;

  // source_locations is the list of locations that Sentinel should use to
  // source policies. At launch, this will just be local directories but could
  // in future be extended to include remote sources.
  repeated string source_locations = 2;
}

// SetupResponse is the message response for the Setup RPC.
message SentinelSetupResponse {

  // The consumer configurations are a map of filenames to consumer
  // configurations for that file.
  message ConsumerConfigurations {
    map<string, cty.Value> configurations = 1;
  }

  // ServerCapabilities are the set of capabilities the server supports.
  message ServerCapabilities {
    map<string, ConsumerConfigurations> consumers = 1;
  }

  // service_capabilities will be populated by the server to indicate which
  // behaviours the client should expect from the server.
  ServerCapabilities server_capabilities = 1;

  // The diagnostics will contain any errors or warnings as a result of loading
  // the sentinel policies.
  repeated diagnostics.Diagnostic diagnostics = 2;
}


// EvaluateRequest is the message body the Evaluate RPC.
message SentinelEvaluateRequest {
  // external_data_service is discussed in detail in the Callback API section
  // below.
  uint32 fetch_service = 1;

  // consumer is the identifier of the caller (eg. terraform).
  string consumer = 5;

  // resource is the resource type that the value represents.
  string resource = 2;

  // attrs contains the data that will eventually be made available within the
  // resource_value data referenced within Sentinel policy files.
  cty.Value attrs = 3;

  // metadata contains the data that will eventually be made available within
  // the resource_metadata data referenced within Sentinel policy files.
  cty.Value metadata = 4;

  // functions contains the functions that are available to this resource type.
  repeated cty.Function functions = 6;
}

// EvaluateResponse is the message response for the Evaluate RPC.
message SentinelEvaluateResponse {
  // Result contains a single value for the overall result of the evaluate RPC.
  // This allows users to differentiate between different types of diagnostics.
  types.EvaluateResult result = 1;

  // diagnostics will contain additional information explaining the reason
  // behind the returned result.
  repeated diagnostics.Diagnostic diagnostics = 2;
}
