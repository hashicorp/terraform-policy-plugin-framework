// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.15.6
// source: types/types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EvaluateResult contains a single value for the overall result of the evaluate
// RPC. This allows users to differentiate between different types of
// diagnostics.
type EvaluateResult int32

const (
	// INVALID means the result that was set by the server wasn't recognized by
	// the client. This means a future version of Terraform Policy has introduced
	// a new result type, and the client isn't aware of this. Clients should
	// handle this gracefully.
	EvaluateResult_INVALID_EVALUATE_RESULT EvaluateResult = 0
	// UNKNOWN means the result could not be verified at this time. This means
	// the client sent unknown values to the server as part of the request, and
	// within Terraform means the request happened at plan time. The
	// diagnostics will contain only warnings explaning which policies could
	// not be evaluated.
	EvaluateResult_UNKNOWN_EVALUATE_RESULT EvaluateResult = 1
	// ERROR means the policy files themselves were invalid in some way, and so
	// the policies could not be evaluated. This would cover things like
	// invalid references or invalid syntax. The diagnostics will contain
	// errors explaining exactly what went wrong.
	EvaluateResult_ERROR_EVALUATE_RESULT EvaluateResult = 2
	// ALLOW means the resource passed all relevant policies. The diagnostics
	// will not contain any errors, but might contain warnings.
	EvaluateResult_ALLOW_EVALUATE_RESULT EvaluateResult = 3
	// DENY means the resource failed at least one relevant policy. The
	// diagnostics will contain exact explanations as to why and should be
	// displayed to the user.
	EvaluateResult_DENY_EVALUATE_RESULT EvaluateResult = 4
)

// Enum value maps for EvaluateResult.
var (
	EvaluateResult_name = map[int32]string{
		0: "INVALID_EVALUATE_RESULT",
		1: "UNKNOWN_EVALUATE_RESULT",
		2: "ERROR_EVALUATE_RESULT",
		3: "ALLOW_EVALUATE_RESULT",
		4: "DENY_EVALUATE_RESULT",
	}
	EvaluateResult_value = map[string]int32{
		"INVALID_EVALUATE_RESULT": 0,
		"UNKNOWN_EVALUATE_RESULT": 1,
		"ERROR_EVALUATE_RESULT":   2,
		"ALLOW_EVALUATE_RESULT":   3,
		"DENY_EVALUATE_RESULT":    4,
	}
)

func (x EvaluateResult) Enum() *EvaluateResult {
	p := new(EvaluateResult)
	*p = x
	return p
}

func (x EvaluateResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluateResult) Descriptor() protoreflect.EnumDescriptor {
	return file_types_types_proto_enumTypes[0].Descriptor()
}

func (EvaluateResult) Type() protoreflect.EnumType {
	return &file_types_types_proto_enumTypes[0]
}

func (x EvaluateResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluateResult.Descriptor instead.
func (EvaluateResult) EnumDescriptor() ([]byte, []int) {
	return file_types_types_proto_rawDescGZIP(), []int{0}
}

type FetchResult int32

const (
	// INVALID means the result that was set by caller was not recognized by
	// Terraform Policy. The caller is using a future version of the protocol and
	// used a result type not known to Terraform Policy at this time. Callers
	// should never set this directly. Terraform Policy will treat this result as
	// ERROR and add a version mismatch warning to the output.
	FetchResult_INVALID_FETCH_RESULT FetchResult = 0
	// ERROR means there was a problem with the data provided by Terraform Policy.
	// Terraform Policy will map this result type back to ERROR in main response,
	// indicating a problem with the policy itself rather than the data.
	FetchResult_ERROR_FETCH_RESULT FetchResult = 1
	// VALID means the request was valid, but doesn't mean there are no
	// errors in the returned diagnostics. If there are errors in the
	// diagnostics, then Terraform Policy will map this result to DENY indicating
	// the policy itself is okay but the provided data meant the resource did
	// not pass evaluation. If there are no errors then Terraform Policy will use
	// the returned value as reference data.
	FetchResult_VALID_FETCH_RESULT FetchResult = 2
)

// Enum value maps for FetchResult.
var (
	FetchResult_name = map[int32]string{
		0: "INVALID_FETCH_RESULT",
		1: "ERROR_FETCH_RESULT",
		2: "VALID_FETCH_RESULT",
	}
	FetchResult_value = map[string]int32{
		"INVALID_FETCH_RESULT": 0,
		"ERROR_FETCH_RESULT":   1,
		"VALID_FETCH_RESULT":   2,
	}
)

func (x FetchResult) Enum() *FetchResult {
	p := new(FetchResult)
	*p = x
	return p
}

func (x FetchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_types_types_proto_enumTypes[1].Descriptor()
}

func (FetchResult) Type() protoreflect.EnumType {
	return &file_types_types_proto_enumTypes[1]
}

func (x FetchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetchResult.Descriptor instead.
func (FetchResult) EnumDescriptor() ([]byte, []int) {
	return file_types_types_proto_rawDescGZIP(), []int{1}
}

var File_types_types_proto protoreflect.FileDescriptor

var file_types_types_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x9a, 0x01, 0x0a, 0x0e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x45, 0x4e, 0x59, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02,
	0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_types_proto_rawDescOnce sync.Once
	file_types_types_proto_rawDescData = file_types_types_proto_rawDesc
)

func file_types_types_proto_rawDescGZIP() []byte {
	file_types_types_proto_rawDescOnce.Do(func() {
		file_types_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_types_proto_rawDescData)
	})
	return file_types_types_proto_rawDescData
}

var file_types_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_types_proto_goTypes = []any{
	(EvaluateResult)(0), // 0: types.EvaluateResult
	(FetchResult)(0),    // 1: types.FetchResult
}
var file_types_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_types_types_proto_init() }
func file_types_types_proto_init() {
	if File_types_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_types_proto_goTypes,
		DependencyIndexes: file_types_types_proto_depIdxs,
		EnumInfos:         file_types_types_proto_enumTypes,
	}.Build()
	File_types_types_proto = out.File
	file_types_types_proto_rawDesc = nil
	file_types_types_proto_goTypes = nil
	file_types_types_proto_depIdxs = nil
}
