// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.15.6
// source: sentinel.proto

package proto

import (
	context "context"
	cty "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto/cty"
	diagnostics "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto/diagnostics"
	types "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SetupRequest is the message body for the Setup RPC.
type SentinelSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_capabilities should be populated by the client to indicate which
	// behaviours the client is aware of.
	ClientCapabilities *SentinelSetupRequest_ClientCapabilities `protobuf:"bytes,1,opt,name=client_capabilities,json=clientCapabilities,proto3" json:"client_capabilities,omitempty"`
	// source_locations is the list of locations that Sentinel should use to
	// source policies. At launch, this will just be local directories but could
	// in future be extended to include remote sources.
	SourceLocations []string `protobuf:"bytes,2,rep,name=source_locations,json=sourceLocations,proto3" json:"source_locations,omitempty"`
}

func (x *SentinelSetupRequest) Reset() {
	*x = SentinelSetupRequest{}
	mi := &file_sentinel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelSetupRequest) ProtoMessage() {}

func (x *SentinelSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelSetupRequest.ProtoReflect.Descriptor instead.
func (*SentinelSetupRequest) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{0}
}

func (x *SentinelSetupRequest) GetClientCapabilities() *SentinelSetupRequest_ClientCapabilities {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

func (x *SentinelSetupRequest) GetSourceLocations() []string {
	if x != nil {
		return x.SourceLocations
	}
	return nil
}

// SetupResponse is the message response for the Setup RPC.
type SentinelSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service_capabilities will be populated by the server to indicate which
	// behaviours the client should expect from the server.
	ServerCapabilities *SentinelSetupResponse_ServerCapabilities `protobuf:"bytes,1,opt,name=server_capabilities,json=serverCapabilities,proto3" json:"server_capabilities,omitempty"`
	// The diagnostics will contain any errors or warnings as a result of loading
	// the sentinel policies.
	Diagnostics []*diagnostics.Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *SentinelSetupResponse) Reset() {
	*x = SentinelSetupResponse{}
	mi := &file_sentinel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelSetupResponse) ProtoMessage() {}

func (x *SentinelSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelSetupResponse.ProtoReflect.Descriptor instead.
func (*SentinelSetupResponse) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{1}
}

func (x *SentinelSetupResponse) GetServerCapabilities() *SentinelSetupResponse_ServerCapabilities {
	if x != nil {
		return x.ServerCapabilities
	}
	return nil
}

func (x *SentinelSetupResponse) GetDiagnostics() []*diagnostics.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// EvaluateRequest is the message body the Evaluate RPC.
type SentinelEvaluateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// external_data_service is discussed in detail in the Callback API section
	// below.
	FetchService uint32 `protobuf:"varint,1,opt,name=fetch_service,json=fetchService,proto3" json:"fetch_service,omitempty"`
	// consumer is the identifier of the caller (eg. terraform).
	Consumer string `protobuf:"bytes,5,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// resource is the resource type that the value represents.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// attrs contains the data that will eventually be made available within the
	// resource_value data referenced within Sentinel policy files.
	Attrs *cty.Value `protobuf:"bytes,3,opt,name=attrs,proto3" json:"attrs,omitempty"`
	// metadata contains the data that will eventually be made available within
	// the resource_metadata data referenced within Sentinel policy files.
	Metadata *cty.Value `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// functions contains the functions that are available to this resource type.
	Functions []*cty.Function `protobuf:"bytes,6,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *SentinelEvaluateRequest) Reset() {
	*x = SentinelEvaluateRequest{}
	mi := &file_sentinel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelEvaluateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelEvaluateRequest) ProtoMessage() {}

func (x *SentinelEvaluateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelEvaluateRequest.ProtoReflect.Descriptor instead.
func (*SentinelEvaluateRequest) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{2}
}

func (x *SentinelEvaluateRequest) GetFetchService() uint32 {
	if x != nil {
		return x.FetchService
	}
	return 0
}

func (x *SentinelEvaluateRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *SentinelEvaluateRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SentinelEvaluateRequest) GetAttrs() *cty.Value {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *SentinelEvaluateRequest) GetMetadata() *cty.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SentinelEvaluateRequest) GetFunctions() []*cty.Function {
	if x != nil {
		return x.Functions
	}
	return nil
}

// EvaluateResponse is the message response for the Evaluate RPC.
type SentinelEvaluateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result contains a single value for the overall result of the evaluate RPC.
	// This allows users to differentiate between different types of diagnostics.
	Result types.EvaluateResult `protobuf:"varint,1,opt,name=result,proto3,enum=types.EvaluateResult" json:"result,omitempty"`
	// diagnostics will contain additional information explaining the reason
	// behind the returned result.
	Diagnostics []*diagnostics.Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *SentinelEvaluateResponse) Reset() {
	*x = SentinelEvaluateResponse{}
	mi := &file_sentinel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelEvaluateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelEvaluateResponse) ProtoMessage() {}

func (x *SentinelEvaluateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelEvaluateResponse.ProtoReflect.Descriptor instead.
func (*SentinelEvaluateResponse) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{3}
}

func (x *SentinelEvaluateResponse) GetResult() types.EvaluateResult {
	if x != nil {
		return x.Result
	}
	return types.EvaluateResult(0)
}

func (x *SentinelEvaluateResponse) GetDiagnostics() []*diagnostics.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// ClientCapabilities are the set of capabilities the client supports.
// At launch, this is empty as we don't have any backwards or forwards
// compatibility concerns to worry about.
type SentinelSetupRequest_ClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SentinelSetupRequest_ClientCapabilities) Reset() {
	*x = SentinelSetupRequest_ClientCapabilities{}
	mi := &file_sentinel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelSetupRequest_ClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelSetupRequest_ClientCapabilities) ProtoMessage() {}

func (x *SentinelSetupRequest_ClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelSetupRequest_ClientCapabilities.ProtoReflect.Descriptor instead.
func (*SentinelSetupRequest_ClientCapabilities) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{0, 0}
}

// The consumer configurations are a map of filenames to consumer
// configurations for that file.
type SentinelSetupResponse_ConsumerConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations map[string]*cty.Value `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SentinelSetupResponse_ConsumerConfigurations) Reset() {
	*x = SentinelSetupResponse_ConsumerConfigurations{}
	mi := &file_sentinel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelSetupResponse_ConsumerConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelSetupResponse_ConsumerConfigurations) ProtoMessage() {}

func (x *SentinelSetupResponse_ConsumerConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelSetupResponse_ConsumerConfigurations.ProtoReflect.Descriptor instead.
func (*SentinelSetupResponse_ConsumerConfigurations) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SentinelSetupResponse_ConsumerConfigurations) GetConfigurations() map[string]*cty.Value {
	if x != nil {
		return x.Configurations
	}
	return nil
}

// ServerCapabilities are the set of capabilities the server supports.
type SentinelSetupResponse_ServerCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers map[string]*SentinelSetupResponse_ConsumerConfigurations `protobuf:"bytes,1,rep,name=consumers,proto3" json:"consumers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SentinelSetupResponse_ServerCapabilities) Reset() {
	*x = SentinelSetupResponse_ServerCapabilities{}
	mi := &file_sentinel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentinelSetupResponse_ServerCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelSetupResponse_ServerCapabilities) ProtoMessage() {}

func (x *SentinelSetupResponse_ServerCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_sentinel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelSetupResponse_ServerCapabilities.ProtoReflect.Descriptor instead.
func (*SentinelSetupResponse_ServerCapabilities) Descriptor() ([]byte, []int) {
	return file_sentinel_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SentinelSetupResponse_ServerCapabilities) GetConsumers() map[string]*SentinelSetupResponse_ConsumerConfigurations {
	if x != nil {
		return x.Consumers
	}
	return nil
}

var File_sentinel_proto protoreflect.FileDescriptor

var file_sentinel_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x1d, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x74, 0x79, 0x2f, 0x63,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x15, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x74, 0x79,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xeb, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x74, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xed, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x74, 0x79, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63,
	0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x74, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0xab, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x08, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x32, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sentinel_proto_rawDescOnce sync.Once
	file_sentinel_proto_rawDescData = file_sentinel_proto_rawDesc
)

func file_sentinel_proto_rawDescGZIP() []byte {
	file_sentinel_proto_rawDescOnce.Do(func() {
		file_sentinel_proto_rawDescData = protoimpl.X.CompressGZIP(file_sentinel_proto_rawDescData)
	})
	return file_sentinel_proto_rawDescData
}

var file_sentinel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_sentinel_proto_goTypes = []any{
	(*SentinelSetupRequest)(nil),                         // 0: protocol.SentinelSetupRequest
	(*SentinelSetupResponse)(nil),                        // 1: protocol.SentinelSetupResponse
	(*SentinelEvaluateRequest)(nil),                      // 2: protocol.SentinelEvaluateRequest
	(*SentinelEvaluateResponse)(nil),                     // 3: protocol.SentinelEvaluateResponse
	(*SentinelSetupRequest_ClientCapabilities)(nil),      // 4: protocol.SentinelSetupRequest.ClientCapabilities
	(*SentinelSetupResponse_ConsumerConfigurations)(nil), // 5: protocol.SentinelSetupResponse.ConsumerConfigurations
	(*SentinelSetupResponse_ServerCapabilities)(nil),     // 6: protocol.SentinelSetupResponse.ServerCapabilities
	nil,                            // 7: protocol.SentinelSetupResponse.ConsumerConfigurations.ConfigurationsEntry
	nil,                            // 8: protocol.SentinelSetupResponse.ServerCapabilities.ConsumersEntry
	(*diagnostics.Diagnostic)(nil), // 9: diagnostics.Diagnostic
	(*cty.Value)(nil),              // 10: cty.Value
	(*cty.Function)(nil),           // 11: cty.Function
	(types.EvaluateResult)(0),      // 12: types.EvaluateResult
}
var file_sentinel_proto_depIdxs = []int32{
	4,  // 0: protocol.SentinelSetupRequest.client_capabilities:type_name -> protocol.SentinelSetupRequest.ClientCapabilities
	6,  // 1: protocol.SentinelSetupResponse.server_capabilities:type_name -> protocol.SentinelSetupResponse.ServerCapabilities
	9,  // 2: protocol.SentinelSetupResponse.diagnostics:type_name -> diagnostics.Diagnostic
	10, // 3: protocol.SentinelEvaluateRequest.attrs:type_name -> cty.Value
	10, // 4: protocol.SentinelEvaluateRequest.metadata:type_name -> cty.Value
	11, // 5: protocol.SentinelEvaluateRequest.functions:type_name -> cty.Function
	12, // 6: protocol.SentinelEvaluateResponse.result:type_name -> types.EvaluateResult
	9,  // 7: protocol.SentinelEvaluateResponse.diagnostics:type_name -> diagnostics.Diagnostic
	7,  // 8: protocol.SentinelSetupResponse.ConsumerConfigurations.configurations:type_name -> protocol.SentinelSetupResponse.ConsumerConfigurations.ConfigurationsEntry
	8,  // 9: protocol.SentinelSetupResponse.ServerCapabilities.consumers:type_name -> protocol.SentinelSetupResponse.ServerCapabilities.ConsumersEntry
	10, // 10: protocol.SentinelSetupResponse.ConsumerConfigurations.ConfigurationsEntry.value:type_name -> cty.Value
	5,  // 11: protocol.SentinelSetupResponse.ServerCapabilities.ConsumersEntry.value:type_name -> protocol.SentinelSetupResponse.ConsumerConfigurations
	0,  // 12: protocol.Sentinel.Setup:input_type -> protocol.SentinelSetupRequest
	2,  // 13: protocol.Sentinel.Evaluate:input_type -> protocol.SentinelEvaluateRequest
	1,  // 14: protocol.Sentinel.Setup:output_type -> protocol.SentinelSetupResponse
	3,  // 15: protocol.Sentinel.Evaluate:output_type -> protocol.SentinelEvaluateResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_sentinel_proto_init() }
func file_sentinel_proto_init() {
	if File_sentinel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sentinel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentinel_proto_goTypes,
		DependencyIndexes: file_sentinel_proto_depIdxs,
		MessageInfos:      file_sentinel_proto_msgTypes,
	}.Build()
	File_sentinel_proto = out.File
	file_sentinel_proto_rawDesc = nil
	file_sentinel_proto_goTypes = nil
	file_sentinel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SentinelClient is the client API for Sentinel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SentinelClient interface {
	// Setup allows the client and server to exchange known capabilities so they
	// trigger alternate behaviour to maintain forwards and backwards
	// compatibility. In addition, this call tells the plugin where to load the
	// sentinel policies from.
	Setup(ctx context.Context, in *SentinelSetupRequest, opts ...grpc.CallOption) (*SentinelSetupResponse, error)
	// Evaluate evaluates a resource against the store policies. Essentially,
	// this function simply calls the equivalent Evaluate function on the
	// internal Sentinel go-library.
	Evaluate(ctx context.Context, in *SentinelEvaluateRequest, opts ...grpc.CallOption) (*SentinelEvaluateResponse, error)
}

type sentinelClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelClient(cc grpc.ClientConnInterface) SentinelClient {
	return &sentinelClient{cc}
}

func (c *sentinelClient) Setup(ctx context.Context, in *SentinelSetupRequest, opts ...grpc.CallOption) (*SentinelSetupResponse, error) {
	out := new(SentinelSetupResponse)
	err := c.cc.Invoke(ctx, "/protocol.Sentinel/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelClient) Evaluate(ctx context.Context, in *SentinelEvaluateRequest, opts ...grpc.CallOption) (*SentinelEvaluateResponse, error) {
	out := new(SentinelEvaluateResponse)
	err := c.cc.Invoke(ctx, "/protocol.Sentinel/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentinelServer is the server API for Sentinel service.
type SentinelServer interface {
	// Setup allows the client and server to exchange known capabilities so they
	// trigger alternate behaviour to maintain forwards and backwards
	// compatibility. In addition, this call tells the plugin where to load the
	// sentinel policies from.
	Setup(context.Context, *SentinelSetupRequest) (*SentinelSetupResponse, error)
	// Evaluate evaluates a resource against the store policies. Essentially,
	// this function simply calls the equivalent Evaluate function on the
	// internal Sentinel go-library.
	Evaluate(context.Context, *SentinelEvaluateRequest) (*SentinelEvaluateResponse, error)
}

// UnimplementedSentinelServer can be embedded to have forward compatible implementations.
type UnimplementedSentinelServer struct {
}

func (*UnimplementedSentinelServer) Setup(context.Context, *SentinelSetupRequest) (*SentinelSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedSentinelServer) Evaluate(context.Context, *SentinelEvaluateRequest) (*SentinelEvaluateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}

func RegisterSentinelServer(s *grpc.Server, srv SentinelServer) {
	s.RegisterService(&_Sentinel_serviceDesc, srv)
}

func _Sentinel_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentinelSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Sentinel/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).Setup(ctx, req.(*SentinelSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sentinel_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentinelEvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Sentinel/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).Evaluate(ctx, req.(*SentinelEvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sentinel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Sentinel",
	HandlerType: (*SentinelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Sentinel_Setup_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Sentinel_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentinel.proto",
}
