// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.15.6
// source: diagnostics/diagnostics.proto

package diagnostics

import (
	cty "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto/cty"
	types "github.com/hashicorp/go-s2-plugin/sentinel-plugin/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Severity int32

const (
	Severity_INVALID Severity = 0
	Severity_WARNING Severity = 1
	Severity_ERROR   Severity = 2
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "INVALID",
		1: "WARNING",
		2: "ERROR",
	}
	Severity_value = map[string]int32{
		"INVALID": 0,
		"WARNING": 1,
		"ERROR":   2,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_diagnostics_diagnostics_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_diagnostics_diagnostics_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{0}
}

// Diagnostic is a message that represents a diagnostic message that can be
// returned by the Sentinel server.
type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=diagnostics.Severity" json:"severity,omitempty"`
	Summary  string   `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Detail   string   `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Subject  *Range   `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Context  *Range   `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// only one result should be set, depending on the type of diagnostic
	//
	// Types that are assignable to Result:
	//
	//	*Diagnostic_EvaluateResult
	//	*Diagnostic_FetchResult
	Result isDiagnostic_Result `protobuf_oneof:"result"`
	// a diagnostic can be associated with a specific attribute
	Attribute *cty.Path `protobuf:"bytes,8,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// if the server had access to the source code that generated the diagnostic,
	// it can provide a snippet of the code that caused the diagnostic.
	Snippet *Snippet `protobuf:"bytes,9,opt,name=snippet,proto3" json:"snippet,omitempty"`
	// if the diagnostic is associated with an expression, the values for
	// variables in the expression can be provided.
	ExpressionValues []*ExpressionValue `protobuf:"bytes,10,rep,name=expression_values,json=expressionValues,proto3" json:"expression_values,omitempty"`
	// if the diagnostic is associated with a function call, the function
	// information can be provided.
	FunctionCall *FunctionCall `protobuf:"bytes,11,opt,name=function_call,json=functionCall,proto3" json:"function_call,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{0}
}

func (x *Diagnostic) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_INVALID
}

func (x *Diagnostic) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Diagnostic) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Diagnostic) GetSubject() *Range {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Diagnostic) GetContext() *Range {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *Diagnostic) GetResult() isDiagnostic_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Diagnostic) GetEvaluateResult() types.EvaluateResult {
	if x, ok := x.GetResult().(*Diagnostic_EvaluateResult); ok {
		return x.EvaluateResult
	}
	return types.EvaluateResult(0)
}

func (x *Diagnostic) GetFetchResult() types.FetchResult {
	if x, ok := x.GetResult().(*Diagnostic_FetchResult); ok {
		return x.FetchResult
	}
	return types.FetchResult(0)
}

func (x *Diagnostic) GetAttribute() *cty.Path {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Diagnostic) GetSnippet() *Snippet {
	if x != nil {
		return x.Snippet
	}
	return nil
}

func (x *Diagnostic) GetExpressionValues() []*ExpressionValue {
	if x != nil {
		return x.ExpressionValues
	}
	return nil
}

func (x *Diagnostic) GetFunctionCall() *FunctionCall {
	if x != nil {
		return x.FunctionCall
	}
	return nil
}

type isDiagnostic_Result interface {
	isDiagnostic_Result()
}

type Diagnostic_EvaluateResult struct {
	EvaluateResult types.EvaluateResult `protobuf:"varint,6,opt,name=evaluate_result,json=evaluateResult,proto3,enum=types.EvaluateResult,oneof"`
}

type Diagnostic_FetchResult struct {
	FetchResult types.FetchResult `protobuf:"varint,7,opt,name=fetch_result,json=fetchResult,proto3,enum=types.FetchResult,oneof"`
}

func (*Diagnostic_EvaluateResult) isDiagnostic_Result() {}

func (*Diagnostic_FetchResult) isDiagnostic_Result() {}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string    `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Start    *Position `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End      *Position `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Range) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Byte   int64 `protobuf:"varint,3,opt,name=byte,proto3" json:"byte,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{2}
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Position) GetByte() int64 {
	if x != nil {
		return x.Byte
	}
	return 0
}

type Snippet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context              *Snippet_Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Code                 string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	StartLine            int64            `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	HighlightStartOffset int64            `protobuf:"varint,4,opt,name=highlight_start_offset,json=highlightStartOffset,proto3" json:"highlight_start_offset,omitempty"`
	HighlightEndOffset   int64            `protobuf:"varint,5,opt,name=highlight_end_offset,json=highlightEndOffset,proto3" json:"highlight_end_offset,omitempty"`
}

func (x *Snippet) Reset() {
	*x = Snippet{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snippet) ProtoMessage() {}

func (x *Snippet) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snippet.ProtoReflect.Descriptor instead.
func (*Snippet) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{3}
}

func (x *Snippet) GetContext() *Snippet_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Snippet) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Snippet) GetStartLine() int64 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Snippet) GetHighlightStartOffset() int64 {
	if x != nil {
		return x.HighlightStartOffset
	}
	return 0
}

func (x *Snippet) GetHighlightEndOffset() int64 {
	if x != nil {
		return x.HighlightEndOffset
	}
	return 0
}

type ExpressionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  *cty.Path  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value *cty.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExpressionValue) Reset() {
	*x = ExpressionValue{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionValue) ProtoMessage() {}

func (x *ExpressionValue) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionValue.ProtoReflect.Descriptor instead.
func (*ExpressionValue) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{4}
}

func (x *ExpressionValue) GetPath() *cty.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ExpressionValue) GetValue() *cty.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbsoluteName string        `protobuf:"bytes,1,opt,name=absolute_name,json=absoluteName,proto3" json:"absolute_name,omitempty"`
	Function     *cty.Function `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{5}
}

func (x *FunctionCall) GetAbsoluteName() string {
	if x != nil {
		return x.AbsoluteName
	}
	return ""
}

func (x *FunctionCall) GetFunction() *cty.Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type Snippet_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Snippet_Context) Reset() {
	*x = Snippet_Context{}
	mi := &file_diagnostics_diagnostics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snippet_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snippet_Context) ProtoMessage() {}

func (x *Snippet_Context) ProtoReflect() protoreflect.Message {
	mi := &file_diagnostics_diagnostics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snippet_Context.ProtoReflect.Descriptor instead.
func (*Snippet_Context) Descriptor() ([]byte, []int) {
	return file_diagnostics_diagnostics_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Snippet_Context) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

var File_diagnostics_diagnostics_proto protoreflect.FileDescriptor

var file_diagnostics_diagnostics_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x63, 0x74, 0x79, 0x2f, 0x63, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x04, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x31, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40,
	0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x37, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x63,
	0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x79, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65, 0x22, 0x81,
	0x02, 0x0a, 0x07, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x23, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x52, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x63, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x74, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x2f, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x32, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnostics_diagnostics_proto_rawDescOnce sync.Once
	file_diagnostics_diagnostics_proto_rawDescData = file_diagnostics_diagnostics_proto_rawDesc
)

func file_diagnostics_diagnostics_proto_rawDescGZIP() []byte {
	file_diagnostics_diagnostics_proto_rawDescOnce.Do(func() {
		file_diagnostics_diagnostics_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnostics_diagnostics_proto_rawDescData)
	})
	return file_diagnostics_diagnostics_proto_rawDescData
}

var file_diagnostics_diagnostics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_diagnostics_diagnostics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_diagnostics_diagnostics_proto_goTypes = []any{
	(Severity)(0),             // 0: diagnostics.Severity
	(*Diagnostic)(nil),        // 1: diagnostics.Diagnostic
	(*Range)(nil),             // 2: diagnostics.Range
	(*Position)(nil),          // 3: diagnostics.Position
	(*Snippet)(nil),           // 4: diagnostics.Snippet
	(*ExpressionValue)(nil),   // 5: diagnostics.ExpressionValue
	(*FunctionCall)(nil),      // 6: diagnostics.FunctionCall
	(*Snippet_Context)(nil),   // 7: diagnostics.Snippet.Context
	(types.EvaluateResult)(0), // 8: types.EvaluateResult
	(types.FetchResult)(0),    // 9: types.FetchResult
	(*cty.Path)(nil),          // 10: cty.Path
	(*cty.Value)(nil),         // 11: cty.Value
	(*cty.Function)(nil),      // 12: cty.Function
}
var file_diagnostics_diagnostics_proto_depIdxs = []int32{
	0,  // 0: diagnostics.Diagnostic.severity:type_name -> diagnostics.Severity
	2,  // 1: diagnostics.Diagnostic.subject:type_name -> diagnostics.Range
	2,  // 2: diagnostics.Diagnostic.context:type_name -> diagnostics.Range
	8,  // 3: diagnostics.Diagnostic.evaluate_result:type_name -> types.EvaluateResult
	9,  // 4: diagnostics.Diagnostic.fetch_result:type_name -> types.FetchResult
	10, // 5: diagnostics.Diagnostic.attribute:type_name -> cty.Path
	4,  // 6: diagnostics.Diagnostic.snippet:type_name -> diagnostics.Snippet
	5,  // 7: diagnostics.Diagnostic.expression_values:type_name -> diagnostics.ExpressionValue
	6,  // 8: diagnostics.Diagnostic.function_call:type_name -> diagnostics.FunctionCall
	3,  // 9: diagnostics.Range.start:type_name -> diagnostics.Position
	3,  // 10: diagnostics.Range.end:type_name -> diagnostics.Position
	7,  // 11: diagnostics.Snippet.context:type_name -> diagnostics.Snippet.Context
	10, // 12: diagnostics.ExpressionValue.path:type_name -> cty.Path
	11, // 13: diagnostics.ExpressionValue.value:type_name -> cty.Value
	12, // 14: diagnostics.FunctionCall.function:type_name -> cty.Function
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_diagnostics_diagnostics_proto_init() }
func file_diagnostics_diagnostics_proto_init() {
	if File_diagnostics_diagnostics_proto != nil {
		return
	}
	file_diagnostics_diagnostics_proto_msgTypes[0].OneofWrappers = []any{
		(*Diagnostic_EvaluateResult)(nil),
		(*Diagnostic_FetchResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnostics_diagnostics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_diagnostics_diagnostics_proto_goTypes,
		DependencyIndexes: file_diagnostics_diagnostics_proto_depIdxs,
		EnumInfos:         file_diagnostics_diagnostics_proto_enumTypes,
		MessageInfos:      file_diagnostics_diagnostics_proto_msgTypes,
	}.Build()
	File_diagnostics_diagnostics_proto = out.File
	file_diagnostics_diagnostics_proto_rawDesc = nil
	file_diagnostics_diagnostics_proto_goTypes = nil
	file_diagnostics_diagnostics_proto_depIdxs = nil
}
